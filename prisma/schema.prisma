// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String  @id
  displayName   String
  photoUrl      String?
  discriminator String
  email         String?

  updatedAt             DateTime                    @updatedAt
  createdAt             DateTime                    @default(now())
  lumaEventGuestEditLog LumaEventGuestDemoEditLog[]
}

model LumaEvent {
  id                    String           @id
  name                  String //  'LLM Meetup Tokyo #3'
  url                   String // 'llm-meetup-tokyo-3'
  geoAddress            String // 'PKSHA STUDIO'
  geoCityState          String // 'Bunkyo City, Tokyo'
  geoPlaceId            String // 'ChIJS9x7qViNGGAR7X8Lq7WB2u4'
  startAt               DateTime // '2023-07-05T10:00:00.501Z',
  endAt                 DateTime // '2023-07-05T12:30:00.501Z'
  coverUrl              String // 'https://images.unsplash.com/photo-1531219435494-8e90d22adc1e?crop=entropy&cs=tinysrgb&fit=crop&fm=jpg&ixid=M3wxMjQyMjF8MHwxfHNlYXJjaHwxNXx8VG9reW98ZW58MHwwfHx8MTY4NTkyODY0OXww&ixlib=rb-4.0.3&q=80&w=2000&h=1000'
  socialImageUrl        String
  registrationQuestions Json
  guestCount            Int // ゲスト数: 表示用
  lumaEventGuest        LumaEventGuest[]
  lumaCrawlJob          LumaCrawlJob[]
}

model LumaUser {
  id             String           @id
  name           String?
  email          String
  avatarUrl      String
  lumaEventGuest LumaEventGuest[]
}

model LumaEventGuest {
  id                  String    @id
  lumaEvent           LumaEvent @relation(fields: [eventId], references: [id])
  eventId             String
  lumaUser            LumaUser  @relation(fields: [userId], references: [id])
  userId              String
  approvalStatus      String // 'invited'
  registrationAnswers Json

  demo String? // 編集されたデモ内容

  updatedAt             DateTime
  createdAt             DateTime
  LumaEventGuestEditLog LumaEventGuestDemoEditLog[]

  @@unique([eventId, userId])
}

// LumaEventGuest の編集ログ
model LumaEventGuestDemoEditLog {
  id               Int            @id @default(autoincrement())
  lumaEventGuest   LumaEventGuest @relation(fields: [lumaEventGuestId], references: [id])
  lumaEventGuestId String
  user             User           @relation(fields: [userId], references: [id])
  userId           String

  oldValue String?
  newValue String?

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

enum LumaCrawlState {
  CREATED
  RUNNING
  DONE
  ERROR
}

model LumaCrawlJob {
  id        Int            @id @default(autoincrement())
  url       String
  status    LumaCrawlState @default(CREATED)
  logs      Json[]
  error     String?
  lumaEvent LumaEvent?     @relation(fields: [eventId], references: [id])
  eventId   String?
  updatedAt DateTime       @updatedAt
  createdAt DateTime       @default(now())
}

model Config {
  id        Int      @id @default(autoincrement())
  key       String   @unique
  value     String
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}
